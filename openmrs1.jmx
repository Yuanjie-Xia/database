<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">10.128.0.9</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://10.128.0.9:8080/openmrs</stringProp>
            <stringProp name="Authorization.username">admin</stringProp>
            <stringProp name="Authorization.password">Admin123</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Person Data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">data/person.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">PERSON</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Shuffled Person Data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">data/personName.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">S_PERSON</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="patient Data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">data/patient.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">PATIENT</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Person Name" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">data/personName.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">PERSON_NAME</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Encounter Type" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">data/encounterType.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">ENCOUNTER_TYPE</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Concept Name Data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">data/conceptName.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">CONCEPT_NAME</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content Type json" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
        <intProp name="maxSize">500</intProp>
      </CacheManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User1" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url1" elementType="Argument">
            <stringProp name="Argument.name">url1</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url11.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url3" elementType="Argument">
            <stringProp name="Argument.name">url3</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url31.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url4" elementType="Argument">
            <stringProp name="Argument.name">url4</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url41.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url5" elementType="Argument">
            <stringProp name="Argument.name">url5</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url51.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url6" elementType="Argument">
            <stringProp name="Argument.name">url6</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url61.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url7" elementType="Argument">
            <stringProp name="Argument.name">url7</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url71.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url8" elementType="Argument">
            <stringProp name="Argument.name">url8</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/url/5url81.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1438456152000</longProp>
        <longProp name="ThreadGroup.end_time">1438456152000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url1}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   if(group_timestamp[2].equals(&quot;POST_url1&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add person" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;names&quot;:[{&quot;givenName&quot;: &quot;thisisanewuser&quot;,&#xd;
&quot;familyName&quot;:&quot;newusersimpletest&quot;}],&#xd;
&quot;gender&quot;:&quot;F&quot;,&#xd;
&quot;age&quot;:&quot;50&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/person</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
          <stringProp name="RegexExtractor.refname">uuid</stringProp>
          <stringProp name="RegexExtractor.regex">&quot;uuid&quot;:&quot;(.+?)&quot;,&quot;display</stringProp>
          <stringProp name="RegexExtractor.template">$1$</stringProp>
          <stringProp name="RegexExtractor.default"></stringProp>
          <stringProp name="RegexExtractor.match_number">1</stringProp>
          <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          <stringProp name="Scope.variable">Add person</stringProp>
        </RegexExtractor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete person" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/person/${uuid}?purge=true</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter3" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n3</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n3} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url3}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n3});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   if(group_timestamp[2].equals(&quot;GET_url3&quot;)){
    	   	//log.info(&quot;time3: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp3&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp3&quot;+${n3});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n3},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n3},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n3}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n3},Delay);
	for(int i=(${n3})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n3},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n3})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search person" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/person?q=${__V(id${n3})}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url4" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter4" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n4</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n4} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url4}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n4});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   if(group_timestamp[2].equals(&quot;GET_url4&quot;)){
    	   	//log.info(&quot;time4: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp4&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp4&quot;+${n4});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n4},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n4},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n4}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n4},Delay);
	for(int i=(${n4})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n4},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n4})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get by encounter type " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/encountertype?q=${__V(id${n4})}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url5" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter5" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n5</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n5} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url5}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n5});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[0]
    	   if(group_timestamp[2].equals(&quot;GET_url5&quot;)){
    	   	//log.info(&quot;time5: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp5&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp5&quot;+${n5});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n5},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n5},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n5}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n5},Delay);
	for(int i=(${n5})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n5},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n5})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get encounter for patient" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/encounter?patient=${__V(id${n5})}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url6" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter6" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n6</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n6} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url6}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n6});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   if(group_timestamp[2].equals(&quot;GET_url6&quot;)){
    	   	//log.info(&quot;time6: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp6&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp6&quot;+${n6});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n6},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n6},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n6}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n6},Delay);
	for(int i=(${n6})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n6},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n6})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get concept by name" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/concept?q=${__V(id${n6})}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url7" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter7" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n7</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n7} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url7}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n7});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   if(group_timestamp[2].equals(&quot;GET_url7&quot;)){
    	   	//log.info(&quot;time7: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp7&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp7&quot;+${n7});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n7},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n7},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n7}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n7},Delay);
	for(int i=(${n7})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n7},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n7})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get observation for patient" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/obs?patient=${__urlencode(${PATIENT})}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="url8" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">4200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter8" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n8</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n8} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url8}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n8});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   if(group_timestamp[2].equals(&quot;GET_url8&quot;)){
    	   	vars.put(&quot;timestamp8&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   }
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp8&quot;+${n8});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n8},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n8},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n8}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n8},Delay);
	for(int i=(${n8})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n8},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n8})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get person data" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">openmrs/ws/rest/v1/person/${__urlencode(${PERSON})}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
