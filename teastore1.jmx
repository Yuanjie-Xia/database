<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">10.128.15.227</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="false">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Product View Count per Page" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="productviewcount" elementType="Argument">
            <stringProp name="Argument.name">productviewcount</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="userid" enabled="true">
        <stringProp name="maximumValue">99</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="outputFormat">user</stringProp>
        <boolProp name="perThread">false</boolProp>
        <stringProp name="randomSeed">6</stringProp>
        <stringProp name="variableName">userid</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="categoryid" enabled="true">
        <stringProp name="variableName">categoryid</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <stringProp name="minimumValue">2</stringProp>
        <stringProp name="maximumValue">6</stringProp>
        <stringProp name="randomSeed">66</stringProp>
        <boolProp name="perThread">false</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="pagenum" enabled="true">
        <stringProp name="variableName">pagenum</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="maximumValue">5</stringProp>
        <stringProp name="randomSeed">666</stringProp>
        <boolProp name="perThread">false</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="productid" enabled="true">
        <stringProp name="variableName">productid</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <stringProp name="minimumValue">7</stringProp>
        <stringProp name="maximumValue">506</stringProp>
        <stringProp name="randomSeed">6666</stringProp>
        <boolProp name="perThread">false</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User1" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url1" elementType="Argument">
            <stringProp name="Argument.name">url1</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWS1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url2" elementType="Argument">
            <stringProp name="Argument.name">url2</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWPR1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url3" elementType="Argument">
            <stringProp name="Argument.name">url3</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWD1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url4" elementType="Argument">
            <stringProp name="Argument.name">url4</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETW1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url5" elementType="Argument">
            <stringProp name="Argument.name">url5</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWL1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url6" elementType="Argument">
            <stringProp name="Argument.name">url6</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/POSTWLA1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url7" elementType="Argument">
            <stringProp name="Argument.name">url7</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWCQ1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url8" elementType="Argument">
            <stringProp name="Argument.name">url8</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWPQ1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url9" elementType="Argument">
            <stringProp name="Argument.name">url9</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/POSTWC1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url10" elementType="Argument">
            <stringProp name="Argument.name">url10</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/POSTWCA1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url11" elementType="Argument">
            <stringProp name="Argument.name">url11</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/GETWC1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url12" elementType="Argument">
            <stringProp name="Argument.name">url12</stringProp>
            <stringProp name="Argument.value">/home/yuanjiexia/database/teastore/POSTWO1.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check Server Status" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url1}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_S&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Server Status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/status</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check User Profile" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">3</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url2}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_PR&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check User Profile" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/profile</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check Database Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">8</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url3}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_D&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Database Setup" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/database</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Home" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url2}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login Page" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url5}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_L&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login Action" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url6}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;POST_W_LA&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Action" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${userid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/loginAction</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Logout" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url6}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;POST_W_LA&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="logout" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">logout</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/loginAction</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="List Products" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url7}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_CQ&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Products" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${categoryid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">category</stringProp>
              </elementProp>
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${pagenum}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/category</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Look at Product" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">4</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url8}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_PQ&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Look at Product" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${productid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/product</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Adjust View Count" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">4</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url9}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;POST_W_C&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adjust View Count" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${categoryid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">category</stringProp>
              </elementProp>
              <elementProp name="number" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${productviewcount}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">number</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/category</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Change product view count from 20 (default) to 30</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add Product to Cart" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url10}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;POST_W_CA&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Product to Cart" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="addToCart" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">addToCart</stringProp>
              </elementProp>
              <elementProp name="productid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${productid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">productid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/cartAction</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check Shopping Cart" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url11}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;GET_W_C&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Shopping Cart" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/cart</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Place an Order" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">9</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">n1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;


int duration = prev.getTime();
String logDelay=vars.get(&quot;timestamp1&quot;+${n1});
//log.info(&quot;logDelay: {}&quot;,logDelay);
int Idelay=Integer.parseInt(logDelay);
int Delay=Idelay-duration;

if(Delay&lt;0){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	Delay=0;
	log.info(&quot;Delay: {}&quot;,Delay);
	vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
if(Delay&gt;0&amp;&amp;(${n1}!=1)){
	vars.putObject(&quot;minusDelay&quot;+${n1},Delay);
	for(int i=(${n1})-1;i&gt;0;i--){
		//log.info(&quot;number: {}&quot;,i);
		int MinusValue=vars.getObject(&quot;minusDelay&quot;+i);
		if(MinusValue&gt;=0){
			break;
			}
		if(MinusValue&lt;0){
			Delay=Delay+MinusValue;
			//log.info(&quot;MinusDelay: {}&quot;,MinusValue);
			//log.info(&quot;InProcessDelay: {}&quot;,Delay);
			}
		//log.info(&quot;minusDelay:{}&quot;,MinusValue);
		
		
	}
      log.info(&quot;Delay: {}&quot;,Delay);
      vars.putObject(&quot;Delay&quot;+${n1},Delay);
	}
	//log.info(&quot;Delay: {}&quot;,Delay);
	


//log.info(&quot;Delay: {}&quot;,String.valueOf(Delay));
//vars.put(&quot;Delay&quot;, String.valueOf(Delay));

</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${n1} == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.*;
import java.io.*;
import java.lang.*;
import java.util.*;

String filename = &quot;${url12}&quot;;
log.info(&quot;######filename: {}&quot;,filename);
log.info(&quot;######count: {}&quot;,${n1});


try {
    File file = new File(filename);

    if (!file.exists()) {
        throw new Exception (&quot;ERROR: file &quot; + filename + &quot; not found&quot;);
    }

    BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;UTF-8&quot;));
    String line = null;
    Integer i = 1;

    while((line = bufRdr.readLine()) != null) {
    	   String[] group_timestamp = line.split(&quot;,&quot;);
    	   //String group=group_timestamp[2]
    	   //if(group_timestamp[2].equals(&quot;POST_W_O&quot;)){
    	   	//log.info(&quot;time1: {}&quot;,group_timestamp[0]);
    	   	vars.put(&quot;timestamp1&quot;+i,group_timestamp[1]);
    	   	vars.put(&quot;id&quot;+i,group_timestamp[3]);
    	   //}
        i++;
    }
     bufRdr.close();            
}
catch (Exception ex) {
    IsSuccess = false; 
    log.error(ex.getMessage());
}
catch (Throwable thex) {
    log.error(thex.getMessage());
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__V(Delay${n1})}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Place an Order" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/tools.descartes.teastore.webui/order</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">result/result.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">result/result.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">result/error.xml</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
